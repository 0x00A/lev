#!/usr/bin/env node

var repl = require('repl')
var fs = require('fs')
var path = require('path')
var http = require('http')
var net = require('net')
var tls = require('tls')
var readline = require('readline')

var deleteRange = require("level-delete-range")
var levelup = require('levelup')
var es = require('event-stream')
var multilevel = require('multilevel')
var argv = require('optimist').argv

var levelcfg = {} 
var replcfg = {}
var r // repl instance.
var httpserver 
var tcpserver
var defaults = {}

try {

  defaults = JSON.parse(fs.readFileSync(path.join(process.env['HOME'], '.lev'))) || {}

}
catch(ex) {

  if (ex.name === 'SyntaxError') {
    console.log('error parsing settings file [%s]', ex.message)
  }
}

//
// take the take the cli argument, else the config file value, if none  use a default.
//
levelcfg.createIfMissing = argv.c || argv.createIfMissing || defaults.createIfMissing || false
levelcfg.errorIfExists = argv.errorIfExists || defaults.errorIfExists || false
levelcfg.compression = argv.compression || defaults.compression || true
levelcfg.keyEncoding = argv.keyEncoding || defaults.keyEncoding || 'json'
levelcfg.valueEncoding = argv.valueEncoding || defaults.valueEncoding || 'json'
levelcfg.encoding = argv.encoding || defaults.encoding || 'json'

if (argv.encoding || defaults.encoding) {
  levelcfg.keyEncoding = levelcfg.encoding
  levelcfg.valueEncoding = levelcfg.encoding
}

var write = function(d) {
  replcfg.output.write('\r\n' + d + '\r\n')
}

var escapeRegExp = function escapeRegExp(str) {
  return str.replace(/[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g, "\\$&")
}

var cachedkeys = []
var databases = {}
var commands = {}
var connection

var ps = ''
var location = (argv.host && argv.host + ':' + argv.port) || argv._[0] || process.cwd()

if (location.length > 15) {
  ps = '...' + location.slice(-15)
}
else {
  ps = location
}

replcfg = {
  prompt: ps + '>',
  input: process.stdin,
  output: process.stdout,
  ignoreUndefined: true
}

if (argv.h && argv.help) {
  lev()
}
else {

  if (argv.port) {

    var protocol = argv.protocol === 'tls' ? tls : net
    var db = multilevel.client()

    connection = protocol.connect(argv)
    db.pipe(connection).pipe(db)
    lev(db)
  }
  else {

    fs.stat(path.join(location, 'LOCK'), function(err) {
      
      if (levelcfg.createIfMissing === false && err) {

        write(
          'no leveldb found in this directory (specify a directory' +
          ' or use `-c` to create a new database).'
        )
        process.exit(1)
      }

      levelup(path.join(location), levelcfg, function(err, db) {

        if (err) {
          return write(err)
        }
        lev(db)
      })

    })
  }
}


function lev(db) {

  if (db) {
    databases[location] = db
  }

  var cleanup = function() {

    if (connection) {
      connection.destroy()
      connection.end()
    }
  }

  process.on('exit', cleanup)
  process.on('SIGINT', cleanup)

  process.on('uncaughtException', function(err) {

    if (err.type === 'unexpected_token') {
      write('Encoding not compatible with ' + levelcfg.encoding)
    }
    else {
      write(err)
    }

    cleanup()
    process.exit(1)
  })

  commands.config = {

    description: 'Get the current configuration object',
    usage: [''],
    cli: false,
    method: function(encoding, includeKeys) {
      return levelcfg
    }
  }

  commands.pwd = {

    description: 'Path of the current working database',
    usage: [''],
    cli: false,
    method: function() {
      return location
    }
  }

  commands.create = {

    description: 'Return a new instance of leveldb',
    usage: [''],
    cli: false,
    method: function(loc, opts, callback) {

      opts = opts || {}

      opts.createIfMissing = true

      location = loc
      databases[loc] = levelup(loc, opts, callback)
      return Object.keys(databases)
    }
  }

  commands.close = {

    description: 'Close an instance of leveldb',
    usage: [''],
    cli: false,
    method: function() {

      db.close(function(err) {
        write(err || 'OK')
        r.displayPrompt()
      })

      return 'Closing...'
    }
  }

  commands.open = {

    description: 'Open an instance of leveldb',
    usage: [''],
    cli: false,
    method: function() {

      db.open(function(err) {
        write(!err ? 'OK' : err)
        r.displayPrompt()
      })
      return 'Opening...'
    }
  }

  commands.use = {

    description: 'Select the current database to use',
    usage: [
      'use([location])',
      'Specify the leveldb instance to use (provides directory tab completion).'
    ],
    cli: false,
    method: function(db) {

      if (!databases[db]) {
        return commands.create.method(db)
      }

      if (!db) {
        return db
      }

      location = db
      db = databases[db]
      return Object.keys(databases)
    }
  }

  commands.ls = {

    description: 'list of databases',
    usage: [''],
    cli: false,
    method: function(db) {

      return Object.keys(databases)
    }
  }

  commands.read = {

    description: 'Stream a range of keys and values.',
    usage: [
      'read([limit], [start], [end])',
      'Where limit is a number, start and end are strings.'
    ],
    shorthand: 'r',
    cli: true,
    method: function() {

      var opts = {}
      var quiet = false

      for (var arg in argv) {
        if (argv[arg] === 'true') {
          argv[arg] = true
        }
        else if (argv[arg] === 'false') {
          argv[arg] = false
        }
      }

      //
      // for internal use, to refresh the key cache
      //
      if (typeof arguments[0] === 'boolean') {

        cachedkeys = []
        opts.values = false
        quiet = true
      }
      else {
        opts = arguments[0] || argv
      }

      if (this.type === 'keys') {
        opts.values = false
        opts.keys = true
      }
      else if (this.type === 'values') {
        opts.keys = false
        opts.values = true
      }

      if (quiet === false) {
        write('[')
      }

      // prepare `obj` for JSON.stringify
      function prepare (obj) {
        return Buffer.isBuffer(obj)
          ? obj.toString()
          : obj;
      }

      db.createReadStream(opts).on('data', function(data) {

        if (quiet === true && !data.key && (!data.value || data.key)) {
          cachedkeys.push(data.key || data)
        }

        if (opts.keys != false && opts.values != false) {
          data.key = prepare(data.key)
          data.value = prepare(data.value)
        } else {
          data = prepare(data)
        }

        if (quiet === false) {
          write(JSON.stringify(data))
        }

      })
      .on('end', function() {

        if (quiet === false) {
          write(']')
        }

        if (r) {
          r.displayPrompt()
        }
      })
    }
  }

  commands.write = {

    description: 'A writable stream.',
    usage: [
      'write([object])',
      'Where object is an object literal with `key` and `value` members.'
    ],
    shorthand: 'w',
    cli: true,
    method: function() {

      if (!db._ws) {

        db._ws = db.createWriteStream()
      }

      if (arguments[0] || (argv.w && argv.w !== true)) {

        db._ws.write(arguments[0] || argv.w)
      }
      else {

        process.stdin.resume()
        process.stdin
          .pipe(es.split())
          .pipe(es.parse())
          .pipe(db._ws)
      }
    }
  }  

  commands.keys = {
    
    description: 'Read a range of keys from the database.',
    usage: [''],
    shorthand: 'k',
    cli: true,
    method: function() {
      commands.read.method.apply({ type: 'keys' }, arguments)
    }
  }

  commands.values = {

    description: 'Read a range of values from the database.',
    usage: [''],
    shorthand: 'v',
    cli: true,
    method: function() {
      commands.read.method.apply({ type: 'values' }, arguments)
    }
  }

  commands.get = {

    description: 'Fetch data from the store.',
    usage: [''],
    shorthand: 'g',
    cli: true,
    method: function(key, cb) {

      key = key || argv.get || argv.g

      if (typeof key === 'string') {
        key = key.replace(/\r\n/g, '')
      }

      if (!key) { 
        return new Error('missing argument') 
      }

      db.get(key, function(err, data) {

        if (err) {
          write(err)
          return cb && cb(err)
        }

        if (levelcfg.valueEncoding === 'json') {
          data = JSON.stringify(data, true, 2)
        } else if (Buffer.isBuffer(data)) {
          data = data.toString()
        } else {
          data = String(data)
        }

        write(data)

        if (r) {
          r.displayPrompt()
          cb && cb(null, data)            
        }
      })
    }
  }

  commands.put = {

    description: 'Insert data into the store.',
    usage: [''],
    shorthand: 'p',
    cli: true,
    method: function(key, value, cb) {

      key = key || argv.put || argv.p
      value = value || argv._[1]

      if (typeof value === 'string') {
        value = value.replace(/\r\n/g, '')
      }

      if (!key) { 
        return new Error('missing argument') 
      }

      if (levelcfg.valueEncoding === 'binary') {
        value = new Buffer(value)
      }

      db.put(key, value, function(err) {

        if (err) {
          write(err)
          return cb && cb(err)
        }

        write('OK')

        if (r) {
          r.displayPrompt()
          
          //
          // refresh the cached keys.
          //
          commands.read.method(true)

          return cb && cb(null)          
        }
      })
    }
  }

  commands.del = {

    description: 'Remove data from the store.',
    usage: [''],
    shorthand: 'd',
    cli: true,
    method: function(key, opts, cb) {

      key = key || argv.del || argv.d

      if (!key) { 
        return new Error('missing argument') 
      }

      db.del(key, function(err) {
        if (err) {
          return cb && cb(err)
        }

        write('OK')
        
        if (r) {
          r.displayPrompt()

          //
          // refresh the cached keys.
          //
          commands.read.method(true)
          return cb && cb(null)            
        }
      })
    }
  }

  commands.delr = {
    description: 'Delete a range from the database.',
    usage: [
      'deleteRange(<start>, [end], [callback])',
      'Delete a range starting from <start> to [end].'
    ],
    shorthand: 'D',
    cli: true,
    method: function(start, end, cb) {

      start = start || argv.start
      end = end || argv.end

      if (!start) {
        return write('A start key must be specified.')
      }

      var opts = {}
      opts.start = start

      if (end) {
        opts.end = end
      }

      deleteRange(db, opts, function (err) {

        if (err && cb) {
          return cb(err)
        }

        if (r) {
          commands.read.method(true)
          return cb && cb(null)
        }
      })

    }
  }

  commands.size = {

    description: 'An approximate number of bytes of used by the given range.',
    usage: [''],
    shorthand: 'a',
    cli: true,
    method: function(start, end, cb) {

      start = start || argv._[1] || ' '
      end = end || argv._[2] || '~'

      if (!cb) {
        cb = function (err, size) { 

          if (err) {
            return write(err)
          }

          write(size)
          
          if (r) {
            r.displayPrompt()
          }
        }
      }

      db.approximateSize(start, end, cb)
    }
  }

  commands.help = {
    description: 'This help',
    usage: [''],
    shorthand: 'h',
    cli: true,
    method: function(method) {

      if (method) {
        write(commands[method].usage.join('\r\n'))
      }

      //
      // TODO: get individual help
      //

      var longestkey = 0, padding = ' '

      for (var command in commands) {
        if (command.length > longestkey) {
          longestkey = command.length
        }
      }

      while(longestkey) {
        padding += ' '
        longestkey--
      }

      var help = []

      for (var command in commands) {
        var c = commands[command]
        var s = '  '
        
        if (argv.help || argv.h) {
          if (!c.cli) {
            continue
          }

          if (c.shorthand === '') {
            s = '  '
          }
          else {
            s = (c.shorthand && '-' + c.shorthand)
          }

          command = '--' + command
        }
        else {
          command = command + '()'
        }

        help.push([
          s,
          command + padding.slice(command.length-2),
          c.description
        ].join(' '))
      }

      write(help.join('\r\n'))
    }
  }

  var shorthandmap = {}
  var cliop

  for (var command in commands) {
    var s = commands[command].shorthand
    if (s) {
      shorthandmap[s] = command
    }
  }

  //
  // test if this was meant to be executed from the commandline.
  //
  for (var command in argv) {

    var c

    if (shorthandmap[command]) {
      cliop = true
      commands[shorthandmap[command]].method()
    }
    else if (commands[command] && commands[command].cli) {
      cliop = true
      commands[command].method()
    }
  }

  if (!cliop) {
    
    var levelupVersion = require(
      path.join(__dirname, 'node_modules', 'levelup', 'package.json')
    ).version

    var historyFile = path.join(__dirname, '.lev_history')

    write([
      
      'compression = ' + levelcfg.compression,
      'encoding = ' + levelcfg.encoding,
      'keyEncoding = ' + levelcfg.keyEncoding,
      'valueEncoding = ' + levelcfg.valueEncoding,
      'levelup version = ' + levelupVersion,
      ''

    ].join('\r\n'))

    r = repl.start(replcfg)

    var exit = r.commands['.exit'].action

    r.commands['.exit'].action = function() {
      console.log('exiting')
      exit()
    }

    var historyStream = fs.createWriteStream(historyFile, { flags: 'a+' })

    r.rli.on('line', function (line) {
      historyStream.write(line + '\n')
    })

    // build a cache of the keys.
    commands.read.method(true)
    
    for (var command in commands) {
      r.context[command] = commands[command].method
    }

    try {

      var history = fs.readFileSync(historyFile, 'utf8')
      var historyLines = history.split('\n')

      historyLines.forEach(function(line) {
        if (line) {
          r.rli.history.unshift(line)
        }
      })

    } catch($) {}

    var _complete = r.complete
    var cmdRE = /\b(?:get|del|delr|put|range)\s*\((?:['"])(.*)/
    var useRE = /\b(?:use)\s*\((?:['"])(.*)/

    r.complete = function(line, callback) {

      var match = line.match(cmdRE)
      var use = line.match(useRE)
      var filter = []

      if (use) {
        return _complete.call(this, 'require(\'' + use[1], arguments[1])
      }

      else if (match) {

        if (cachedkeys.length === 0) {
          callback(null, [[], ''])
        }
        else {
          
          filter = cachedkeys.filter(function(e) {
            return e.match(new RegExp('^' + escapeRegExp(match[1]) + '(?:.*?)$'))
          })
        }

        var list = (filter.length > 0) ? filter : cachedkeys
        return callback(null, [list, match[1]])
      }
      _complete.apply(this, arguments)

    }
  }
}
