#!/usr/bin/env node
var fs = require('fs')
var pkg = require('./package.json')
var deepmerge = require('deepmerge')
var ui = require('./lib/ui')
var utils = require('./lib/utils')
var Tree = require('level-subtree')
var client = require('./lib/client')
var argv = require('optimist').argv

var args = require('optimist')

var argv = args
  .usage('lev [path] [options]')

  .alias('t', 'tree')
  .describe('tree', 'List sublevels as a tree')

  .describe('c', 'Creates a database')

  .alias('d', 'del')
  .describe('del', 'Remove an entity')

  .alias('g', 'get')
  .describe('get', 'Get an record based on the key')

  .describe('put --value', 'Insert a new value')  

  .alias('k', 'keys')
  .describe('keys', 'Return only keys')

  .alias('l', 'limit')
  .describe('limit', 'The number of entities to return')

  .alias('s', 'start')
  .describe('start', 'The starting key for a read')

  .alias('e', 'end')
  .describe('end', 'The end key')

  .describe('cd', 'Change into or create a sublevel')

  .alias('h', 'help')
  .describe('help', 'Print this help text')
  .argv

if (argv.h || argv.help) {
  console.log(args.help())
  process.exit(0)
}

var settings
var screen = ui.screen()
screen._.busy = false
var output = ui.output(screen)

var model = {
  query: {
    start: '',
    end: '',
    reverse: false,
    limit: -1
  },
  key: null,
  sublevel: null,
  connection: null,
  settings: settings
}

ui.output.log('\n' + pkg.name, 'version', pkg.version)
ui.output.log('level version', pkg.dependencies.level)

try {
  model.settingsFile = utils.find('.lev');
  model.settings = JSON.parse(fs.readFileSync(model.settingsFile)) || {}
  ui.output.log('reading config from', model.settingsFile, '\n')
}
catch(ex) {

  if (ex.name === 'SyntaxError') {
    ui.output.log('error parsing settings file [%s]', ex.message)
  }

  ui.output.log(ex)
}

var commands = ui.commands(screen, model)
var values = ui.values(screen, model)
var keylist = ui.keylist(screen, model)
var query = ui.query(screen, model)
var connections = ui.connections(screen, model)
var tree = ui.tree(screen)
var info = ui.info(screen)

ui.commands.add({
  name: 'QUERY',
  prefix: '1',
  keys: ['1'],
  callback: function() {
    connections.hide()
    tree.hide()
    info.hide()
    query.toggle()
    screen.render()
  }
})

ui.commands.add({
  name: 'DELETE',
  prefix: '2',
  keys: ['2'],
  callback: function() {

    var selection = keylist.items[keylist.selected]

    if (!selection) return

    var key = selection.content

    if (!key || !ui.keylist.isSublevel(key)) {
      return ui.output.log('NOT OK!', 'unable to delete that key\n')
    }

    client.del(key, function(err) {
      if (err) return ui.output.log('NOT OK!', err)
      keylist.removeItem(key)
      screen.render()
    })
  }
})

ui.commands.add({
  name: 'EDIT',
  prefix: '3',
  keys: ['3'],
  callback: function() {
    var opts = { value: values.getText() }
    screen.readEditor(opts, function(err, value) {
      if (err) return ui.output.error(err)
      if (opts.value === value) return

      //
      // TODO: if encoding is JSON, try to json parse.
      //

      var key = keylist.items[keylist.selected].content
      client.put(key, value.trim())
      values.setContent(value)
      screen.render()
    })
  }
})

ui.commands.add({
  name: 'TREE',
  prefix: '4',
  keys: ['4'],
  callback: function() {
    connections.hide()
    query.hide()
    info.hide()
    ui.tree.update()
    tree.toggle()
    screen.render()
  }
})

ui.commands.add({
  name: 'INFO',
  prefix: '5',
  keys: ['5'],
  callback: function() {
    connections.hide()
    query.hide()
    tree.hide()
    ui.info.update(model, function(err) {
      if (err) return ui.output.log(err)
      info.toggle()
      screen.render()
    })
  }
})

ui.commands.add({
  name: 'CONNECTIONS',
  prefix: '6',
  keys: ['6'],
  callback: function() {
    query.hide()
    tree.hide()
    info.hide()
    connections.toggle()
    connections.focus()
    screen.render()
  }
})

screen.on('keypress', function(ch, key) {
  if (key && key.name == 'tab') {
    if (!key.shift) {
      screen.focusNext()
    } else {
      screen.focusPrev()
    }
    return screen.render()
  }
  else if (key && key.name == 'escape') {
    connections.hide()
    query.hide()
    tree.hide()
    info.hide()
    return screen.render()
  }
})

connections.focus()
//connections.list.select(0)
screen.render()
