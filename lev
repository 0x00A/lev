#!/usr/bin/env node

var repl = require('repl');
var fs = require('fs');
var path = require('path');
var levelup = require('levelup');
var argv = require('optimist').argv;

var levelcfg = { 
  createIfMissing: argv.createIfMissing || false, 
  errorIfExists: argv.errorIfExists || false, 
  compression: argv.compression || true,
  encoding: argv.encoding || 'utf8',
  keyEncoding: argv.keyEncoding || 'utf8',
};

var replcfg = {
  prompt: '>',
  input: process.stdin,
  output: process.stdout
};

var keypress = function keypress() {
  input.emit('keypress', '\r', { name: 'enter', ctrl: false, meta: false, shift: false });
}

var output = replcfg.output;
var input = replcfg.input;

fs.stat(argv.location || path.join('.', 'LOCK'), function(err) {

  var location, cli;

  if (err && err.errno === 34) {
    process.stderr.write('error. no leveldb found in this directory (try using `--location`).\r\n');
    process.exit(1);
  }
  else {
    location = argv.location || process.cwd();
  }

  levelup(location, levelcfg, function(err, db) {

    if (err) {
      return output.write(err);
    }

    var m = {};

    m.pwd = function() {
      return location;
    };

    m.readStream = m.r = function(start, end, limit) {

      var opts = {};

      if (argv.r) {
        opts.start = argv.r;
        opts.end = argv._[0] || argv.start + '~';
        opts.limit = argv.limit || argv.l || -1;
        opts.reverse = argv.reverse || false;
      }
      else if (typeof arguments[0] === 'number') {
        limit = arguments[0];
        start = undefined;
        end = undefined;
      }
      else if (typeof arguments[0] === 'object') {
        opts = arguments[0];
      }
      else {
        opts = {
          start: start || argv.start,
          end: (end || argv.end || start + '~'),
          limit: (limit || argv.limit || 80)
        };
      }

      db.readStream(opts)
        .on('data', function(data) {
          if (m.formatting || argv.format) {
            output.write('\r\n' + data);
          }
          else {
            output.write(data);
          }
        })
        .on('end', function() { 
          keypress();
        })
      ;
    };

    m.get = m.g = function(key, cb) {

      key = key || argv.get;

      if (!key) { 
        return new Error('missing argument'); 
      }

      db.get(key, function(err, value) {

        if (err) {
          output.write(err + '\r\n');
          return cb && cb(err);
        }
        if (m.formatting || argv.format) {
          output.write('\r\n' + value + '\r\n');
          keypress();
        }
        else {
          output.write(null, value);
        }
        cb && cb(null, value);
      });
    };

    m.put = m.p = function(key, value, cb) {

      key = key || argv.put;
      value = value || argv._[0];

      if (!key) { 
        return new Error('missing argument'); 
      }

      db.put(key, value, function(err) {
        if (err) {
          output.write(err + '\r\n');
          return cb && cb(err);
        }
        output.write('OK\r\n');
        keypress();
        return cb && cb(null);
      });
    };

    m.del = m.d = function(key, opts, cb) {
     
      key = key || argv.del;

      if (!key) { 
        return new Error('missing argument'); 
      }

      db.del(key, function(err) {
        if (err) {
          return cb && cb(err);
        }
        output.write('OK\r\n');
        keypress();
        return cb && cb(null);
      });
    };

    m.keys = m.k = function(opts) {

      if (argv.limit || argv.l) {
        opts = { limit: argv.limit || argv.l };
      }
      else if (typeof opts === 'number') {
        opts = { limit: opts };
      }

      db.keyStream(opts)
        .on('data', function (data) {

          (m.formatting || argv.format)
            ? output.write('\r\n' + data)
            : output.write(data)
          ;
        })
        .on('end', function() {
          output.write('\r\n');
          keypress();
        })
      ;
    };

    m.approximateSize = function(start, end, callback) {

      start = start || argv._[0] || ' ';
      end = end || argv._[1] || '~';

      callback = callback || function (err, size) { 

        if (err) {
          return output.write(err);
        }

        (m.formatting || argv.format)
          ? output.write('\r\n' + size)
          : output.write(String(size))
        ;
      };

      db.approximateSize(start, end, callback);
    };

    m.values = m.v = function(opts) {

      if (argv.limit || argv.l) {
        opts = { limit: argv.limit || argv.l };
      }
      else if (typeof opts === 'number') {
        opts = { limit: opts };
      }

      db.valueStream(opts)
        .on('data', function (data) {

          if (m.truncate > -1 || (argv.tuncate && argv.truncate > -1)) {
            data = data.substr(0, m.truncate || argv.truncate);
          }

          (m.formatting || argv.format)
            ? output.write('\r\n' + data)
            : output.write(data)
          ;
        })
        .on('end', function() {
          output.write('\r\n');
          keypress();
        })
      ;
    };

    m.isOpen = function() {
      return db.isOpen();
    };

    m.isClosed = function() {
      return db.isClosed();
    };

    m.formatting = false;

    m.format = function(b) {
      return m.formatting = b;
    }

    for (var cmd in argv) {
      if (m[cmd]) {
        cli = true;
        m[cmd](argv[cmd]);
      }
    }

    if (!cli) {
      var r = repl.start(replcfg);
      
      for (var key in m) {
        if (key.length > 1) {
          r.context[key] = m[key];
        }
      }
    }
   });
});
