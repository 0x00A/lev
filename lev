#!/usr/bin/env node
var fs = require('fs')
var args = require('optimist')
var pkg = require('./package.json')
var utils = require('./lib/utils')

var client
var output
var log

var argv = args
  .usage('\nUSAGE: lev [path] [options]')

  .alias('t', 'tree')
  .describe('tree', 'List sublevels as a tree')

  .describe('c', 'Creates a database')

  .alias('d', 'del')
  .describe('del', 'Remove an entity')

  .alias('q', 'quiet')
  .describe('quiet', 'Only print critical messages')

  .alias('g', 'get')
  .describe('get', 'Get an record based on the key')

  .describe('put --value', 'Insert a new value')  

  .alias('k', 'keys')
  .describe('keys', 'Return only keys')

  .alias('l', 'limit')
  .describe('limit', 'The number of entities to return')

  .alias('s', 'start')
  .describe('start', 'The starting key for a read')

  .alias('e', 'end')
  .describe('end', 'The end key')

  .describe('cd', 'Change into or create a sublevel')

  .alias('h', 'help')
  .describe('help', 'Print this help text')
  .argv

if (argv.h || argv.help) {
  console.log(args.help())
  process.exit(0)
}

var config = utils.readConfig()

if (process.argv.length > 2) {
  log = console.log
}
else {
  var ui = require('./lib/ui')(config)
  log = ui.log
}

if (!argv.q) {
  log('\n' + pkg.name, 'version', pkg.version)
  log('level version', pkg.dependencies.level + '\n')
}

if (process.argv.length > 2) {

  if (argv._.length == 0) {
    console.log('No path specified')
    process.exit(1)
  }

  try {
    fs.statSync(argv._[0] + '/LOCK')
  }
  catch(ex) {
    if (!argv.c) {
      console.log('To create a database use -c')
      process.exit(1)
    }
  }

  var cli = false
  var cli_commands = [
    'tree', 'keys', 'values', 'cd', 'get', 
    'put', 'del', 'createReadStream', 'betch'
  ]

  for (cmd in argv) {
    if (cli_commands.indexOf(cmd) > -1) {
      cli = true
    }
  }

  if (!argv.valueEncoding) {
    argv.valueEncoding = 'json'
  }

  if (!argv.keyEncoding) {
    argv.keyEncoding = 'utf8'
  }

  if (!argv.q) {
    console.log('value encoding set to %s', argv.valueEncoding.toUpperCase())
    console.log('key encoding set to %s', argv.keyEncoding.toUpperCase())
  }

  if (cli) {
    require('./lib/cli')(argv, config)
  }
  else {
    require('./lib/repl')(argv, config)
  }
}
